    <style>
        .card-header {
            background-color: rgb(228, 178, 117);
            color: white;
        }

        .btn-primary-custom {
            background-color: rgb(228, 178, 117);
            color: white;
        }

        .error-message {
            color: red;
            font-size: small;
            margin-top: 5px;
        }
        .is-invalid {
    border-color: #dc3545;
}

.spinner-border {
    vertical-align: middle;
    margin-right: 5px;
}

.btn:disabled {
    opacity: 0.65;
}
    </style>


<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header">
                    <h4 class="mb-0">Edit Coupon</h4>
                </div>
                <div class="card-body">
                    <form id="edit-coupon-form">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="couponName" class="form-label">Coupon Name</label>
                                <input type="text" name="couponName" id="name" class="form-control" placeholder="Coupon Name" value="{{coupon.couponName}}">
                                <div class="error-message" id="name-error"></div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="discountAmount" class="form-label">Discount Amount</label>
                                <input type="number" name="discountAmount" id="amount" class="form-control" min="1" value="{{coupon.discountAmount}}">
                                <div class="error-message" id="amount-error"></div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="minPurchaseAmount" class="form-label">Minimum Purchase Amount</label>
                                <input type="number" name="minPurchaseAmount" id="minAmount" class="form-control" . min="200" value="{{coupon.minPurchaseAmount}}">
                                <div class="error-message" id="minAmount-error"></div>
                            </div>
                        </div>

                       <div class="form-group">
                            <label for="expiryDate">Expiry Date</label>
                            <input type="date" id="expiryDate" name="expiryDate" value="{{formatDate coupon.expiryDater 'YYYY-MM-DD'}}">
                            <div class="error-message" id="expiryDate-error"></div>
                        </div>


                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea name="description" id="description" class="form-control" rows="4">{{coupon.description}}</textarea>
                            <div class="error-message" id="description-error"></div>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary-custom">Submit</button>
                            <a href="/admin/coupon" class="btn btn-secondary">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById("edit-coupon-form").addEventListener("submit", async (e) => {
    e.preventDefault();
    const form = e.target;
    const submitButton = form.querySelector('button[type="submit"]');
    const originalButtonText = submitButton.textContent;
    
    // Clear previous errors
    document.querySelectorAll('.error-message').forEach(el => {
        el.textContent = '';
    });
    document.querySelectorAll('.is-invalid').forEach(el => {
        el.classList.remove('is-invalid');
    });

    // Add loading state
    submitButton.disabled = true;
    submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Updating...';

    const formData = new FormData(form);
    const couponId = '{{coupon._id}}';

    // Client-side validation
    let isValid = true;
    if (!formData.get('couponName')) {
        document.getElementById('name-error').textContent = 'Coupon name is required';
        document.getElementById('name').classList.add('is-invalid');
        isValid = false;
    }
    if (!formData.get('discountAmount') || formData.get('discountAmount') < 1) {
        document.getElementById('amount-error').textContent = 'Valid discount amount is required';
        document.getElementById('amount').classList.add('is-invalid');
        isValid = false;
    }
    if (!formData.get('minPurchaseAmount') || formData.get('minPurchaseAmount') < 200) {
        document.getElementById('minAmount-error').textContent = 'Minimum purchase must be at least 200';
        document.getElementById('minAmount').classList.add('is-invalid');
        isValid = false;
    }
    if (!formData.get('expiryDate')) {
        document.getElementById('expiryDate-error').textContent = 'Expiry date is required';
        document.getElementById('expiryDate').classList.add('is-invalid');
        isValid = false;
    }

    if (!isValid) {
        submitButton.disabled = false;
        submitButton.textContent = originalButtonText;
        return;
    }

    const requestBody = {
        id: couponId,
        ...Object.fromEntries(formData)
    };

    try {
        const response = await fetch('/admin/coupon', {
            method: "PUT",
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody)
        });

        const result = await response.json();
        
        if (response.ok) {
            // Show success message before redirect
            Swal.fire({
                title: 'Success!',
                text: 'Coupon edited successfully',
                icon: 'success',
                confirmButtonText: 'OK',
                timer: 3000,
                timerProgressBar: true
            }).then(() => {
                window.location.href = result.redirect || "/admin/coupon";
            });
        } else {
            // Handle server-side validation errors
            if (result.errors) {
                Object.entries(result.errors).forEach(([field, message]) => {
                    const errorElement = document.getElementById(`${field}-error`);
                    const inputElement = document.getElementById(field);
                    if (errorElement && inputElement) {
                        errorElement.textContent = message;
                        inputElement.classList.add('is-invalid');
                    }
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: result.message || "Update failed",
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }
    } catch (error) {
        console.error("Network error:", error);
        Swal.fire({
            title: 'Network Error',
            text: 'Please try again',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    } finally {
        submitButton.disabled = false;
        submitButton.textContent = originalButtonText;
    }
});
</script>