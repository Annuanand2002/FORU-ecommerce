<style>
    .image-preview {
        position: relative;
        width: 120px;
        height: 120px;
        margin: 5px;
        display: inline-block;
    }
    .image-preview img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    .remove-image {
        position: absolute;
        top: 5px;
        right: 5px;
        background: red;
        color: white;
        border: none;
        border-radius: 50%;
        width: 25px;
        height: 25px;
        font-size: 12px;
        cursor: pointer;
    }
    .edit-image {
        position: absolute;
        bottom: 5px;
        right: 5px;
        background: rgb(228, 178, 117);
        color: white;
        border: none;
        border-radius: 4px;
        padding: 2px 5px;
        font-size: 12px;
        cursor: pointer;
    }
</style>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow">
                <div class="card-header text-center" style="background-color: rgb(228, 178, 117); color: white;">
                    <h2 class="mb-0">Edit Product</h2>
                </div>
                <div class="card-body" style="background-color: #f8f9fa;">
                    <form id="editProductForm" action="/admin/edit-product/{{product._id}}" method="post" enctype="multipart/form-data">
                        <input type="hidden" name="removedImages" id="removedImages" value="">
                        
                        <div class="mb-3">
                            <label for="name" class="form-label" style="color: #333;">Product Name:</label>
                            <input type="text" name="name" id="name" class="form-control" value="{{product.name}}" required>
                            <small id="nameError" class="text-danger"></small>
                        </div>

                        <div class="mb-3">
                            <label for="price" class="form-label" style="color: #333;">Price:</label>
                            <input type="number" name="price" id="price" class="form-control" value="{{product.price}}" required>
                            <small id="priceError" class="text-danger"></small>
                        </div>

                        <div class="mb-3">
                            <label for="category" class="form-label" style="color: #333;">Category:</label>
                            <select name="category" class="form-control" required>
                                <option value="" disabled selected>Select category</option>
                                {{#each categories}}
                                <option value="{{this.name}}" {{#ifEquals this.name product.category}}selected{{/ifEquals}}>
                                    {{this.name}}
                                </option>
                                {{/each}}
                            </select>
                            <small id="categoryError" class="text-danger"></small>
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label" style="color: #333;">Product Description:</label>
                            <textarea name="description" id="description" class="form-control" rows="4" required>{{product.description}}</textarea>
                            <small id="descriptionError" class="text-danger"></small>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Current Images:</label>
                            <div id="images-container">
                                {{#each product.images}}
                                <div class="image-preview">
                                    <img src="{{this}}" alt="Product Image">
                                    <button type="button" class="remove-image" data-src="{{this}}">Ã—</button>
                                </div>
                                {{/each}}
                            </div>
                            <label class="form-label mt-3">Add New Images (optional):</label>
                            <input type="file" name="images" id="images" class="form-control" multiple accept="image/*">
                            <div id="new-images-container" class="mt-2"></div>
                            <small class="text-muted">Maximum 5 images total</small>
                        </div>

                        <div class="mb-3">
                            <label for="sizes" class="form-label" style="color: #333;">Product Sizes:</label>
                            <div id="sizes-container">
                                {{#each product.sizes}}
                                <div class="size-entry mb-2 d-flex align-items-center">
                                    <input type="text" name="sizeName[]" class="form-control me-2" value="{{this.size}}" readonly>
                                    <input type="number" name="sizeQuantity[]" class="form-control me-2" value="{{this.quantity}}" min="1">
                                    <button type="button" class="btn btn-danger btn-sm remove-size">Remove</button>
                                </div>
                                {{/each}}
                            </div>
                            <button type="button" class="btn btn-sm mt-2" id="addSizeBtn" style="background-color:rgb(228, 178, 117);color:white;">
                                Add New Size
                            </button>
                        </div>

                        <div class="mb-3 form-check">
                            <input type="checkbox" name="bestSeller" id="bestSeller" class="form-check-input" {{#if product.bestSeller}}checked{{/if}}>
                            <label for="bestSeller" class="form-check-label" style="color: #333;">Bestseller</label>
                        </div>

                        <div class="mb-3 form-check">
                            <input type="checkbox" name="latestCollection" id="latestCollection" class="form-check-input" {{#if product.latestCollection}}checked{{/if}}>
                            <label for="latestCollection" class="form-check-label" style="color: #333;">Latest Collection</label>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn" style="background-color:rgb(228, 178, 117);color:white">Submit</button>
                            <a href="/admin/products" class="btn" style="background-color:rgb(228, 178, 117);color:white">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Cropping Modal -->
<div class="modal fade" id="cropModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="cropper-image" src="" alt="Preview" style="max-width: 100%;">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn" style="background-color:rgb(228, 178, 117);color:white;" id="save-crop">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const MAX_IMAGES = 5;
    let cropper;
    let currentFileIndex;
    let removedImages = [];
    let newImageFiles = [];
    
    // Size management
    const addSizeBtn = document.getElementById('addSizeBtn');
    const sizesContainer = document.getElementById('sizes-container');

    addSizeBtn.addEventListener('click', function() {
        const newSizeHTML = `
            <div class="size-entry mb-2 d-flex align-items-center">
                <input type="text" name="sizeName[]" class="form-control me-2" placeholder="Size Name" required>
                <input type="number" name="sizeQuantity[]" class="form-control me-2" placeholder="Quantity" min="0" required>
                <button type="button" class="btn btn-danger btn-sm remove-size">Remove</button>
            </div>
        `;
        sizesContainer.insertAdjacentHTML('beforeend', newSizeHTML);
    });

    sizesContainer.addEventListener('click', function(event) {
        if (event.target.classList.contains('remove-size')) {
            event.target.parentNode.remove();
        }
    });

    // Handle removal of existing images
    document.getElementById('images-container').addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-image')) {
            const imgSrc = e.target.getAttribute('data-src');
            removedImages.push(imgSrc);
            document.getElementById('removedImages').value = JSON.stringify(removedImages);
            e.target.parentElement.remove();
        }
    });

    // Handle new image uploads
    document.getElementById('images').addEventListener('change', function(e) {
        const files = Array.from(e.target.files);
        const existingCount = document.querySelectorAll('#images-container .image-preview').length - removedImages.length;
        const newCount = newImageFiles.length;
        
        if (files.length + existingCount + newCount > MAX_IMAGES) {
            alert(`You can only have ${MAX_IMAGES} images total`);
            this.value = '';
            return;
        }
        
        files.forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = function(e) {
                const previewId = `preview-${Date.now()}-${index}`;
                const previewDiv = document.createElement('div');
                previewDiv.className = 'image-preview';
                previewDiv.id = previewId;
                previewDiv.innerHTML = `
                    <img src="${e.target.result}" alt="New Image">
                    <button type="button" class="remove-image" data-preview="${previewId}">Ã—</button>
                    <button type="button" class="edit-image" data-index="${newImageFiles.length}">Edit</button>
                `;
                
                document.getElementById('new-images-container').appendChild(previewDiv);
                
                newImageFiles.push({
                    id: previewId,
                    file: file,
                    src: e.target.result
                });
                
                updateFileInput();
            };
            reader.readAsDataURL(file);
        });
    });

    // Handle removal of new images
    document.getElementById('new-images-container').addEventListener('click', function(e) {
        if (e.target.classList.contains('remove-image')) {
            const previewId = e.target.getAttribute('data-preview');
            newImageFiles = newImageFiles.filter(img => img.id !== previewId);
            document.getElementById(previewId).remove();
            updateFileInput();
        }
    });

    // Handle image editing
    document.getElementById('new-images-container').addEventListener('click', function(e) {
        if (e.target.classList.contains('edit-image')) {
            currentFileIndex = parseInt(e.target.getAttribute('data-index'));
            const image = newImageFiles[currentFileIndex];
            document.getElementById('cropper-image').src = image.src;
            $('#cropModal').modal('show');
        }
    });

    // Initialize cropper
    $('#cropModal').on('shown.bs.modal', function() {
        cropper = new Cropper(document.getElementById('cropper-image'), {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 0.8
        });
    });

    // Clean up cropper
    $('#cropModal').on('hidden.bs.modal', function() {
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
    });

    // Save cropped image
    document.getElementById('save-crop').addEventListener('click', function() {
        if (cropper) {
            const canvas = cropper.getCroppedCanvas({
                width: 800,
                height: 800,
                fillColor: '#fff',
                imageSmoothingQuality: 'high'
            });
            
            canvas.toBlob(blob => {
                const file = new File([blob], `cropped-${Date.now()}.jpg`, {
                    type: 'image/jpeg'
                });
                
                // Update the file reference and preview
                newImageFiles[currentFileIndex].file = file;
                const reader = new FileReader();
                reader.onload = e => {
                    newImageFiles[currentFileIndex].src = e.target.result;
                    document.querySelector(`#${newImageFiles[currentFileIndex].id} img`).src = e.target.result;
                };
                reader.readAsDataURL(blob);
                
                updateFileInput();
                $('#cropModal').modal('hide');
            }, 'image/jpeg', 0.9);
        }
    });

    // Update the file input with current files
    function updateFileInput() {
        const dataTransfer = new DataTransfer();
        newImageFiles.forEach(img => {
            dataTransfer.items.add(img.file);
        });
        document.getElementById('images').files = dataTransfer.files;
    }
});
</script>
