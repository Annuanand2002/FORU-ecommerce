<style>
    /* Custom CSS for styling the table */
    .order-table {
        border-collapse: separate;
        border-spacing: 0;
        width: 100%;
    }

    .order-table th,
    .order-table td {
        padding: 0.75rem;
        text-align: left;
        border-bottom: 1px solid #dee2e6;
        vertical-align: middle;

    }

    .order-table th {
        background-color: rgb(228, 178, 117);
        font-weight: bold;
        color: white;
    }

    .order-table tbody tr:hover {
        background-color: #f5f5f5;
    }

    .order-table .status {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .order-table .status-completed {
        color: #28a745;
    }

    .order-table .status-pending {
        color: #ffc107;
    }

    .order-table .status-shipping {
        color: #007bff;
    }

    .order-table .status-cancelled {
        color: #dc3545;
    }

    .order-table .payment-method {
        display: flex;
        align-items: center;
    }

    .order-table .view-details {
        color: #007bff;
        text-decoration: none;
    }

    .order-table .view-details:hover {
        text-decoration: underline;
    }

 .container {
 padding: 20px;
}
.pagination {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

.page-item {
  margin: 0 5px;
}

.page-link {
  color: rgb(228, 178, 117);
  background-color: white;
  border: 1px solid #ddd;
  padding: 8px 16px;
  border-radius: 5px;
  cursor: pointer;
}

.page-link:hover {
  background-color: rgb(228, 178, 117);
  color: white;
}

.page-item.active .page-link {
  background-color: rgb(228, 178, 117);
  color: white;
  border-color: rgb(228, 178, 117);
}

.page-item.disabled .page-link {
  color: #ccc;
  cursor: not-allowed;
}
.status-dropdown:disabled {
  background-color: #f5f5f5;
  cursor: not-allowed;
  opacity: 0.7;
}
</style>
<div class="container">
  <h4 style="margin-top: 30px;color:rgb(158, 147, 147)">Order details</h4>
  <table class="table order-table" style="margin-top: 50px;margin-left:10px;">
    <thead>
      <tr>
        <th>Order</th>
        <th>Date</th>
        <th>Customer</th>
        <th>Shipping Status</th>
        <th>Payment</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      {{#each orders}}
        <tr>
          <td>#{{this._id}}</td>
          <td>{{formatDate this.createdAt}}</td>
          <td>{{this.userId.name}}</td>
          <td class="status">
  <select class="status-dropdown" data-order-id="{{this._id}}" {{#if (or (eq this.status "Completed") (eq this.status "Cancelled"))}}disabled{{/if}}>
    <option value="Pending" {{#ifEquals this.status "Pending"}}selected{{/ifEquals}}>Pending</option>
    <option value="Shipped" {{#ifEquals this.status "Shipped"}}selected{{/ifEquals}}>Shipped</option>
    <option value="Completed" {{#ifEquals this.status "Completed"}}selected{{/ifEquals}}>Completed</option>
    <option value="Cancelled" {{#ifEquals this.status "Cancelled"}}selected{{/ifEquals}}>Cancelled</option>
    <option value="Returned" {{#ifEquals this.status "Returned"}}selected{{/ifEquals}}>Returned</option>
  </select>
  <span class="status-{{this.status}}" style="padding-top:50px;color:rgb(90, 87, 87);font-size:12px;"><br>*{{this.status}}</span>
</td>
          <td class="payment-method">
  {{this.payment}}<br>
  {{#if (eq this.payment "Online Payment")}}
    <span style="font-family: 'Times New Roman', Times, serif; font-size:12px;color:rgb(72, 67, 67)">
      {{this.paymentStatus}}
    </span>
  {{/if}}
</td>
          <td class="payment-method"><a href="/admin/order-details/{{this._id}}"><button style="background-color: rgb(228, 178, 117);border:none;color:white;border-radius:2px;">View details</button></a></td>
        </tr>
      {{/each}}
    </tbody>
  </table>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const statusDropdowns = document.querySelectorAll('.status-dropdown');
    statusDropdowns.forEach(dropdown => {
        dropdown.addEventListener('change', function () {
            const orderId = this.getAttribute('data-order-id');
            const newStatus = this.value;
            updateOrderStatus(orderId, newStatus);
        });
    });

    async function updateOrderStatus(orderId, newStatus) {
        try {
            const response = await fetch(`/admin/update-order-status/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ status: newStatus }),
            });

            const result = await response.json();

            if (response.ok) {
                const statusCell = document.querySelector(`.status-dropdown[data-order-id="${orderId}"]`).closest('.status');
                statusCell.querySelector('span').textContent = `*${newStatus}`;
            } else {
                alert(result.message || 'An error occurred while updating the order status.');
            }
        } catch (error) {
            alert('An error occurred while updating the order status.');
        }
    }
});
</script>