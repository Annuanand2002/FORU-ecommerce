

<style>
    /* Existing CSS remains the same */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8f9fa;
        margin: 0;
        padding: 0;
        min-height: 100vh;
    }

    .container-fluid {
        padding: 20px;
    }

    .stats-container {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        gap: 20px;
        margin: 30px 0;
    }

    .card {
        flex: 1;
        min-width: 200px;
        max-width: 250px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: transform 0.3s;
    }

    .card:hover {
        transform: translateY(-5px);
    }

    .tables-container {
        display: flex;
        flex-wrap: wrap;
        gap: 30px;
        margin-top: 30px;
    }

    .table-wrapper:first-child {
        flex: 2;
        min-width: 400px;
    }

    .table-wrapper:last-child {
        flex: 1;
        min-width: 300px;
    }

    .chart-container {
        background: white;
        padding: 20px;
        border-radius: 10px;
        margin-top: 30px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        position: relative;
        height: 400px;
    }

    .chart-controls {
        margin: 15px 0;
        text-align: center;
    }

    .active-period {
        background-color: rgb(228, 178, 117) !important;
        color: white !important;
        border-color: rgb(228, 178, 117) !important;
    }

    .badge {
        font-size: 0.75em;
        padding: 0.5em 0.75em;
        border-radius: 0.25em;
        margin-right: 5px;
        margin-bottom: 5px;
        display: inline-block;
    }

    .brand-color {
        background-color: rgb(228, 178, 117);
        color: white;
    }

    .period-selector {
        transition: all 0.3s ease;
        min-width: 80px;
        margin: 0 5px;
        border: 1px solid #ddd;
        background: white;
    }

    .table-responsive {
        overflow-x: auto !important; /* Enable horizontal scrolling for tables */
        overflow-y: hidden;
    }

    .table-responsive table {
        width: 100%;
        min-width: 600px; /* Prevent table from collapsing too much */
    }

    /* Status badge colors */
    .bg-Pending {
        background-color: #ffc107;
        color: #000;
    }
    .bg-Completed {
        background-color: #28a745;
        color: white;
    }
    .bg-Processing {
        background-color: #17a2b8;
        color: white;
    }
    .bg-Cancelled {
        background-color: #dc3545;
        color: white;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .stats-container {
            justify-content: space-around;
        }

        .card {
            min-width: 45%;
            max-width: none;
        }

        .tables-container {
            flex-direction: column;
        }

        .table-wrapper:first-child,
        .table-wrapper:last-child {
            flex: none;
            width: 100%;
            min-width: auto;
        }

        .chart-container {
            height: 350px; /* Adjust chart height for smaller screens */
        }

        .col-md-8,
        .col-md-4 {
            width: 100%;
        }
    }

    @media (max-width: 576px) {
        .card {
            min-width: 100%;
        }

        .chart-container {
            height: 300px; /* Further adjust chart height for smaller screens */
        }
    }
</style>

<body>
    <div class="container-fluid">
        <button type="button" class="btn brand-color mt-4" data-bs-toggle="modal" data-bs-target="#addAdminModal">
            Add Admin
        </button>
<div class="modal fade" id="addAdminModal" tabindex="-1" aria-labelledby="addAdminModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addAdminModalLabel">Add New Admin</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="adminForm">
                    <div class="mb-3">
                        <label for="adminUsername" class="form-label">Username</label>
                        <input type="text" class="form-control" id="adminUsername" required>
                        <div class="invalid-feedback" id="usernameFeedback">Please provide a username.</div>
                    </div>
                    <div class="mb-3">
                        <label for="adminPassword" class="form-label">Password</label>
                        <input type="password" class="form-control" id="adminPassword" required minlength="6">
                        <div class="invalid-feedback" id="passwordFeedback">
                            Password must be at least 6 characters.
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="adminConfirmPassword" class="form-label">Confirm Password</label>
                        <input type="password" class="form-control" id="adminConfirmPassword" required>
                        <div class="invalid-feedback" id="confirmPasswordFeedback">
                            Passwords do not match.
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn brand-color text-white" id="submitAdminBtn">Add Admin</button>
            </div>
        </div>
    </div>
</div>
        <div class="container mt-4">
            <h3 class="text-center mb-4" style="color:rgb(228, 178, 117);">üìä Dashboard</h3>

            <div class="stats-container">
                <div class="card text-white brand-color">
                    <div class="card-body text-center">
                        <h5 class="card-title">Total Sales</h5>
                        <h2 class="card-text">‚Çπ{{totalSales}}</h2>
                    </div>
                </div>

                <div class="card text-white" style="background-color:rgb(207, 175, 136);">
                    <div class="card-body text-center">
                        <h5 class="card-title">Total Orders</h5>
                        <h2 class="card-text">{{totalOrders}}</h2>
                    </div>
                </div>

                <div class="card text-dark" style="background-color:rgb(186, 204, 167);">
                    <div class="card-body text-center">
                        <h5 class="card-title">Products Sold</h5>
                        <h2 class="card-text">{{totalProductSold}}</h2>
                    </div>
                </div>

                <div class="card text-white" style="background-color:rgb(207, 167, 167);">
                    <div class="card-body text-center">
                        <h5 class="card-title">Pending Orders</h5>
                        <h2 class="card-text">{{pendingOrders}}</h2>
                    </div>
                </div>
            </div>

            <div class="row mt-4">
                <div class="col-md-8">
                    <div class="chart-container">
                        <h4 style="color: rgb(228, 178, 117);">üìà Sales Trend</h4>
                        <div class="chart-controls">
                            <button class="btn btn-sm period-selector active-period" data-period="daily">Daily</button>
                            <button class="btn btn-sm period-selector" data-period="weekly">Weekly</button>
                            <button class="btn btn-sm period-selector" data-period="monthly">Monthly</button>
                        </div>
                        <canvas id="salesChart"></canvas>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="chart-container">
                        <h4 style="color: rgb(228, 178, 117);">üõçÔ∏è Sales by Category</h4>
                        <canvas id="categoryChart"></canvas>
                    </div>
                </div>
            </div>
<br>
<br>
<br>
            <div class="tables-container">
                <div class="table-wrapper">
                    <h4 class="mb-3">üì¶ Recent Orders</h4>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Total</th>
                                    <th>Status</th>
                                    <th>Payment</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each orders}}
                                <tr>
                                    <td>{{this._id}}</td>
                                    <td>{{this.userId.name}}</td>
                                    <td>‚Çπ{{this.totalPrice}}</td>
                                    <td>
                                        {{#each (getStatusCounts this.items)}}
                                        <span class="badge bg-{{@key}}">
                                            {{@key}}: {{this}}
                                        </span>
                                        {{/each}}
                                    </td>
                                    <td>{{this.payment}}</td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="table-wrapper">
                    <h4 class="mb-3">üåü Top-Selling Products</h4>
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Product Name</th>
                                    <th>Units Sold</th>
                                    <th>Total Revenue</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each topSellingProducts}}
                                <tr>
                                    <td>{{this.productDetails.name}}</td>
                                    <td>{{this.unitsSold}}</td>
                                    <td>‚Çπ{{this.revenue}}</td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>


<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="adminSuccessToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <strong class="me-auto">Success</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            Admin added successfully!
        </div>
    </div>
</div>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Parse the server-side data
      const salesData = JSON.parse('{{{salesData}}}');
      const categoryData = JSON.parse('{{{categorySales}}}');
      
      // Log data for debugging
      console.log('Sales Data:', salesData);
      console.log('Category Data:', categoryData);
      
      // Initialize sales chart
      const salesCtx = document.getElementById('salesChart').getContext('2d');
      let salesChart = createSalesChart(salesCtx, salesData.daily);
      
      // Initialize category chart
      const categoryCtx = document.getElementById('categoryChart').getContext('2d');
      createCategoryChart(categoryCtx, categoryData);
      
      // Period selector functionality
      document.querySelectorAll('.period-selector').forEach(btn => {
        btn.addEventListener('click', function() {
          document.querySelectorAll('.period-selector').forEach(b => b.classList.remove('active-period'));
          this.classList.add('active-period');
          
          const period = this.dataset.period;
          updateSalesChart(salesChart, salesData[period]);
        });
      });
      
      // Chart creation functions
      function createSalesChart(ctx, periodData) {
        return new Chart(ctx, {
          type: 'line',
          data: {
            labels: periodData.labels,
            datasets: [{
              label: 'Sales (‚Çπ)',
              data: periodData.data,
              backgroundColor: 'rgba(228, 178, 117, 0.2)',
              borderColor: 'rgb(228, 178, 117)',
              borderWidth: 2,
              tension: 0.3,
              fill: true
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { display: false },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    return ' ‚Çπ' + context.raw.toLocaleString();
                  }
                }
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  callback: function(value) {
                    return '‚Çπ' + value.toLocaleString();
                  }
                }
              }
            }
          }
        });
      }
      
      function updateSalesChart(chart, periodData) {
        chart.data.labels = periodData.labels;
        chart.data.datasets[0].data = periodData.data;
        chart.update();
      }
      
      function createCategoryChart(ctx, data) {
        const labels = data.map(item => item._id || 'Uncategorized');
        const values = data.map(item => item.totalSales);
        const backgroundColors = generateColors(labels.length);
        
        new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: labels,
            datasets: [{
              data: values,
              backgroundColor: backgroundColors,
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  boxWidth: 12,
                  padding: 20
                }
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    return ' ‚Çπ' + context.raw.toLocaleString();
                  }
                }
              }
            }
          }
        });
      }
      
      function generateColors(count) {
        const baseColor = [228, 178, 117];
        const colors = [];
        
        for (let i = 0; i < count; i++) {
          // Create variations of your brand color
          const hue = (baseColor[0] + (i * 30)) % 360;
          colors.push(`hsla(${hue}, 70%, 65%, 0.7)`);
        }
        
        return colors;
      }
    });
   document.addEventListener('DOMContentLoaded', function() {
   

    // Admin form validation and submission
    const adminForm = document.getElementById('adminForm');
    const adminUsername = document.getElementById('adminUsername');
    const adminPassword = document.getElementById('adminPassword');
    const adminConfirmPassword = document.getElementById('adminConfirmPassword');
    const submitAdminBtn = document.getElementById('submitAdminBtn');
    const adminSuccessToast = new bootstrap.Toast(document.getElementById('adminSuccessToast'));

    // Real-time validation
    adminUsername.addEventListener('input', validateUsername);
    adminPassword.addEventListener('input', validatePassword);
    adminConfirmPassword.addEventListener('input', validateConfirmPassword);

    function validateUsername() {
      if (adminUsername.value.trim() === '') {
        adminUsername.classList.add('is-invalid');
        return false;
      }
      adminUsername.classList.remove('is-invalid');
      return true;
    }

    function validatePassword() {
      if (adminPassword.value.length < 6) {
        adminPassword.classList.add('is-invalid');
        return false;
      }
      adminPassword.classList.remove('is-invalid');
      validateConfirmPassword();
      return true;
    }

    function validateConfirmPassword() {
      if (adminConfirmPassword.value !== adminPassword.value) {
        adminConfirmPassword.classList.add('is-invalid');
        return false;
      }
      adminConfirmPassword.classList.remove('is-invalid');
      return true;
    }

    // Form submission
    submitAdminBtn.addEventListener('click', function() {
      const isUsernameValid = validateUsername();
      const isPasswordValid = validatePassword();
      const isConfirmValid = validateConfirmPassword();

      if (isUsernameValid && isPasswordValid && isConfirmValid) {
        const adminData = {
          username: adminUsername.value.trim(),
          password: adminPassword.value
        };

        fetch('/admin/add-admin', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(adminData)
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Show success toast
            adminSuccessToast.show();
            
            // Close modal and reset form
            const modal = bootstrap.Modal.getInstance(document.getElementById('addAdminModal'));
            modal.hide();
            adminForm.reset();
          } else {
            alert( data.message);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred while adding admin');
        });
      }
    });

    // Reset validation when modal is closed
    document.getElementById('addAdminModal').addEventListener('hidden.bs.modal', function() {
      adminForm.reset();
      [adminUsername, adminPassword, adminConfirmPassword].forEach(el => {
        el.classList.remove('is-invalid');
      });
    });
  });
</script>
</body>