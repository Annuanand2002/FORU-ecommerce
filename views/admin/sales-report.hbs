<div class="col-md-10 p-4">
  <h4 class="my-3" style="color: rgb(228, 178, 117);">Sales Report</h4>
  <div class="d-flex justify-content-between align-items-center mb-4 pt-5">
    <div>
      <button class="btn me-2" style="background: linear-gradient(to top left, rgb(228, 178, 117), rgb(255, 224, 178)); color: white;" onclick="exportToPDF()">
        Export PDF
      </button>
      <button class="btn" style="background: linear-gradient(to top left, rgb(228, 178, 117), rgb(255, 224, 178)); color: white;" onclick="exportToExcel()">
        Export Excel
      </button>
    </div>
  </div>

  <!-- Filter Section -->
  <div class="container border p-4">
    <div class="row mb-4">
      {{!-- <div class="col-md-3">
        <label for="reportType" class="form-label">Report Type</label>
        <select class="form-select" id="reportType">
          <option value="">Select Report Type</option>
          <option value="daily">Daily</option>
          <option value="weekly">Weekly</option>
          <option value="monthly">Monthly</option>
          <option value="yearly">Yearly</option>
        </select>
        <div id="reportTypeError" class="text-danger" style="display: none;">Please select a report type.</div>
      </div> --}}
      <div class="col-md-3">
        <label for="startDate" class="form-label">Start Date</label>
        <input type="date" class="form-control" id="startDate">
        <div id="startDateError" class="text-danger" style="display: none;">Please select a start date.</div>
      </div>
      <div class="col-md-3">
        <label for="endDate" class="form-label">End Date</label>
        <input type="date" class="form-control" id="endDate">
        <div id="endDateError" class="text-danger" style="display: none;">Please select an end date.</div>
        <div id="dateRangeError" class="text-danger" style="display: none;">End date must be greater than or equal to start date.</div>
      </div>
      <div class="col-md-3 d-flex align-items-end">
        <button class="btn" style="background: linear-gradient(to top left, rgb(228, 178, 117), rgb(255, 224, 178)); color: white;" onclick="applyFilter()">
          Apply Filter
        </button>
      </div>
    </div>
  </div>

  <!-- Table -->
  <div class="table-responsive pt-3">
    <table class="table table-bordered" id="salesTable">
      <thead>
        <tr>
          <th class="text-center" style="background-color: rgb(228, 178, 117); color:white">OrderID</th>
          <th class="text-center" style="background-color: rgb(228, 178, 117); color:white">Customer Name</th>
          <th class="text-center" style="background-color: rgb(228, 178, 117); color:white">Product Name</th>
          <th class="text-center" style="background-color: rgb(228, 178, 117); color:white">Quantity</th>
          <th class="text-center" style="background-color: rgb(228, 178, 117); color:white">Total Price</th>
          <th class="text-center" style="background-color: rgb(228, 178, 117); color:white">Discount Amount</th>
          <th class="text-center" style="background-color: rgb(228, 178, 117); color:white">New Total</th>
        </tr>
      </thead>
      <tbody>
        {{#each sales}}
          <tr>
            <td class="text-center">{{this.orderId}}</td>
            <td class="text-center">{{this.username}}</td>
            <td class="text-center">{{this.productname}}</td>
            <td class="text-center">{{this.quantity}}</td>
            <td class="text-center">{{this.totalPrice}}</td>
            <td class="text-center">{{this.discountAmount}}</td>
            <td class="text-center">{{this.newTotal}}</td>
          </tr>
        {{/each}}
      </tbody>
    </table>
  </div>
</div>

<!-- Include jsPDF and AutoTable -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.24/jspdf.plugin.autotable.min.js"></script>

<!-- Include XLSX -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js"></script>

<script>
  function exportToPDF() {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    // Get table data
    const table = document.querySelector('#salesTable');
    const headers = [];
    const rows = [];

    // Extract headers
    table.querySelectorAll('thead th').forEach(th => {
      headers.push(th.innerText);
    });

    // Extract rows
    table.querySelectorAll('tbody tr').forEach(tr => {
      const row = [];
      tr.querySelectorAll('td').forEach(td => {
        row.push(td.innerText);
      });
      rows.push(row);
    });

    // Add table to PDF
    doc.autoTable({
      head: [headers],
      body: rows,
      theme: 'grid', 
    });

    // Save the PDF
    doc.save('sales-report.pdf');
  }

  // Export to Excel
  function exportToExcel() {
    // Get table data
    const table = document.querySelector('#salesTable');
    const workbook = XLSX.utils.table_to_book(table);

    // Export to Excel file
    XLSX.writeFile(workbook, 'sales-report.xlsx');
  }

async function applyFilter() {
  const startDate = document.getElementById('startDate').value;
  const endDate = document.getElementById('endDate').value;
  const today = new Date().toISOString().split('T')[0]; 

  // Reset error messages
  document.getElementById('startDateError').style.display = 'none';
  document.getElementById('endDateError').style.display = 'none';
  document.getElementById('dateRangeError').style.display = 'none';

  let isValid = true;

  // Validate inputs
  if (!startDate) {
    document.getElementById('startDateError').style.display = 'block';
    document.getElementById('startDateError').textContent = 'Please select a start date.';
    isValid = false;
  }else if(startDate>today){
    document.getElementById('startDateError').style.display = 'block';
    document.getElementById('startDateError').textContent = 'Start date cannot be in the future.';
    isValid = false;
    startDateInput.value = '';
  }

  if (!endDate) {
    document.getElementById('endDateError').style.display = 'block';
    document.getElementById('endDateError').textContent = 'Please select an end date.';
    isValid = false;
  }else if(endDate>today){
    document.getElementById('endDateError').style.display = 'block';
    document.getElementById('endDateError').textContent = 'End date cannot be in the future.';
    isValid = false;
  }

  if (startDate && endDate && new Date(endDate) < new Date(startDate)) {
    document.getElementById('dateRangeError').style.display = 'block';
    isValid = false;
  }

  // If validation passes, fetch data
  if (isValid) {
    const filterCriteria = { startDate, endDate };

    try {
      const response = await fetch('/admin/filter-sales', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(filterCriteria),
      });

      if (!response.ok) {
        throw new Error('Failed to fetch data');
      }

      const data = await response.json();
      updateTable(data);
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred while fetching data. Please try again.');
    }
  }
}

function updateTable(data) {
  const tbody = document.querySelector('#salesTable tbody');
  tbody.innerHTML = ''; // Clear existing rows

  if (data.length === 0) {
    tbody.innerHTML = `
      <tr>
        <td colspan="7" class="text-center">No orders found</td>
      </tr>
    `;
    return;
  }

  data.forEach((order) => {
    const row = `
      <tr>
        <td class="text-center">${order.orderId}</td>
        <td class="text-center">${order.username}</td>
        <td class="text-center">${order.productname}</td>
        <td class="text-center">${order.quantity}</td>
        <td class="text-center">${order.totalPrice}</td>
        <td class="text-center">${order.discountAmount}</td>
        <td class="text-center">${order.newTotal}</td>
      </tr>
    `;
    tbody.insertAdjacentHTML('beforeend', row);
  });
}
</script>