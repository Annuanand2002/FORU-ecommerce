<style>
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .category-name {
      max-width: 150px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .list-group-item {
      padding: 0.75rem 0.5rem !important;
    }
    
    .btn-sm {
      padding: 0.2rem 0.4rem !important;
      font-size: 0.8rem !important;
    }
  }
  
  @media (max-width: 576px) {
    .category-name {
      max-width: 100px;
    }
    
    .list-group-item > div {
      flex-direction: column;
      align-items: flex-end;
    }
    
    .list-group-item > div > .me-2 {
      margin-right: 0 !important;
      margin-bottom: 0.5rem;
    }
    
    .btn {
      padding: 0.375rem 0.5rem !important;
      font-size: 0.9rem !important;
    }
  }
</style>



<div class="container mt-4">
  <div class="row">
    <div class="col-md-6">
      <h4 class="my-3 pt-5" style="color: rgb(228, 178, 117);">Category</h4>
      <h6 class="my-3 pt-5" style="color: rgb(39, 38, 38); font-weight: 600;">Category Details</h6>

      <!-- Add Button -->
      <button type="button" class="btn mt-4" style="background-color: rgb(228, 178, 117); color: white;" 
              data-bs-toggle="modal" data-bs-target="#addCategoryModal">Add</button>

      <!-- Display Categories -->
      <ul class="list-group mt-4" id="categoryList">
        {{#each categories}}
        <li class="list-group-item d-flex justify-content-between align-items-center">
          {{this.name}}
          <div class="d-flex align-items-center">
            <!-- Offer Button Container -->
            <div class="me-2">
              {{#if this.offers.length}}
                <form action="/admin/remove-category-offer" method="POST" onsubmit="return confirm('Are you sure you want to remove this offer?')" class="m-0">
                  <input type="hidden" name="categoryId" value="{{this._id}}">
                  <input type="hidden" name="offerId" value="{{this.offers.[0]}}">
                  <button type="submit" class="btn btn-sm" style="background: linear-gradient(to top left, rgb(255, 99, 99), rgb(255, 204, 204)); color: white;">Remove Offer</button>
                </form>
              {{else}}
                <a href="/admin/add-offer/{{this._id}}" class="btn btn-sm" style="background: linear-gradient(to top left, rgb(102, 204, 102), rgb(51, 153, 51)); color: white; text-decoration: none;" aria-label="Add offer">
                  Add Offer
                </a>
              {{/if}}
            </div>
            
            <!-- Delete Button -->
            <button type="button" class="btn btn-sm delete-category" data-id="{{this._id}}" style="border-radius: 50%; padding: 0.25rem 0.5rem; line-height: 1;">
              &times;
            </button>
          </div>
        </li>
        {{/each}}
      </ul>
    </div>
  </div>

  <!-- Add Category Modal -->
  <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addCategoryModalLabel">Add Category</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="addCategoryForm">
            <div class="mb-3">
              <label for="categoryName" class="form-label">Category Name</label>
              <input type="text" class="form-control" id="categoryName" placeholder="Enter category name">
              <div id="categoryError" class="text-danger mt-2"></div>
            </div>
            <button type="submit" class="btn btn-primary" id="saveCategoryBtn">Save</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>


<script>

document.getElementById('addCategoryForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const nameInput = document.getElementById('categoryName');
  const name = nameInput.value.trim();
  const errorElement = document.getElementById('categoryError');
  const submitButton = e.target.querySelector('button[type="submit"]');
  const form = e.target;
  
  // Clear previous errors
  errorElement.textContent = '';
  
  // Client-side validation
  if (!name) {
    errorElement.textContent = 'Category name is required';
    nameInput.focus();
    return;
  }

  if (name.length < 2) {
    errorElement.textContent = 'Name must be at least 2 characters';
    nameInput.focus();
    return;
  }

  if (name.length > 50) {
    errorElement.textContent = 'Name cannot exceed 50 characters';
    nameInput.focus();
    return;
  }

  // Show loading state
  submitButton.disabled = true;
  submitButton.innerHTML = `
    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
    Creating...
  `;

  try {
    const response = await fetch('/admin/category', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ name })
    });

    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.message || 'Failed to create category');
    }

    // Success case - show message and handle UI updates
    await Swal.fire({
      icon: 'success',
      title: 'Success!',
      text: result.message,
      timer: 2000,
      showConfirmButton: false
    });

    // Close modal and reset form
    const modal = bootstrap.Modal.getInstance(document.getElementById('addCategoryModal'));
    if (modal) modal.hide();
    form.reset();
    
    // Refresh the page
    window.location.reload();

  } catch (error) {
    // Error handling - show only one error message
    errorElement.textContent = error.message;
    nameInput.focus();
    
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'Failed to create category'
    });
  } finally {
    // Reset button state
    submitButton.disabled = false;
    submitButton.textContent = 'Save';
  }
});

document.querySelectorAll('.delete-category').forEach(button => {
  button.addEventListener('click', async function() {
    const categoryId = this.dataset.id;
    const categoryName = this.closest('li').textContent.trim().split('\n')[0]; 
    
    // Show loading state
    const originalHTML = this.innerHTML;
    this.innerHTML = '<span class="spinner-border spinner-border-sm"></span>';
    this.disabled = true;

    try {
      const result = await Swal.fire({
        title: 'Delete Category',
        html: `Are you sure you want to delete <strong>${categoryName}</strong>?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Delete',
        cancelButtonText: 'Cancel',
        reverseButtons: true,
        allowOutsideClick: false
      });

      if (result.isConfirmed) {
        const response = await fetch(`/admin/category/${categoryId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            // Add CSRF token if needed:
            // 'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          }
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.message || 'Failed to delete category');
        }

        await Swal.fire({
          icon: 'success',
          title: 'Deleted!',
          text: `Category "${categoryName}" was deleted successfully`,
          timer: 2000,
          showConfirmButton: false
        });

        // Remove from UI
        this.closest('li').remove();
      }
    } catch (error) {
      await Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Failed to delete category',
        timer: 3000
      });
    } finally {
      // Reset button state
      this.innerHTML = originalHTML;
      this.disabled = false;
    }
  });
});
</script>

