
<style>
body {
    font-family: sans-serif;
    margin: 0;
    padding: 0;
    line-height: 1.6;
    color: #333;
    background: linear-gradient(to right, #f5f5f5, #d6a57a);
}

.container {
    max-width: 1200px;
    margin: 50px auto;
    padding: 20px;
    display: flex;
    gap: 20px;
    background-color: white;
}

.left-column {
    flex: 2; /* Takes 2/3 of the space */
    border: 1px solid #ddd; /* Add border to left column */
    border-radius: 10px; /* Rounded corners */
    padding: 20px; /* Add padding for spacing */
}

.right-column {
    flex: 1; /* Takes 1/3 of the space */
    border: 1px solid #ddd; /* Add border to right column */
    border-radius: 10px; /* Rounded corners */
    padding: 20px; /* Add padding for spacing */
}

.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.header-left {
    display: flex;
    align-items: center;
}

.header-left img {
    width: 50px;
    margin-right: 10px;
}

.header-right {
    display: flex;
    justify-content: center;
    align-items: center;
    flex: 1;
}

.header-right a {
    margin: 0 15px;
    color: black;
    text-decoration: none;
    font-weight: bold;
}

.address {
    margin-bottom: 20px;
    background-color: rgb(232, 218, 200);
    padding: 20px;
    border-radius: 10px;
}

.address-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.address-content {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 5px;
}

.item {
    display: flex;
    margin-bottom: 20px;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
}

.item img {
    width: 100px;
    margin-right: 10px;
}

.item-details {
    flex: 1;
}

.item-name {
    font-weight: bold;
}

.item-options {
    display: flex;
    align-items: center;
    margin-top: 10px;
}

.item-options select {
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 3px;
    margin-right: 10px;
}

.item-options button {
    padding: 5px 10px;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 3px;
    cursor: pointer;
}

.price-details {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
}

.price-summary {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.total-amount {
    font-weight: bold;
    font-size: 1.2rem;
}

.place-order {
    background-color: rgb(228, 178, 117);
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    width: 100%;
}

/* Responsive Styles */
@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }

    .left-column,
    .right-column {
        flex: 1;
    }

    .item {
        flex-direction: column;
        align-items: flex-start;
    }

    .item img {
        width: 80px;
        margin-right: 0;
        margin-bottom: 10px;
    }

    .item-options {
        flex-direction: column;
        align-items: flex-start;
    }

    .item-options select {
        margin-right: 0;
        margin-bottom: 10px;
    }
}
.modal {
display: none; /* Hidden by default */
position: fixed;
z-index: 1;
left: 0;
top: 0;
width: 100%;
height: 100%;
overflow: auto;
background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
background-color: #fefefe;
margin: 15% auto;
padding: 20px;
border: 1px solid #888;
width: 30%; /* Adjust as needed */
position: relative; /* For positioning close button */
border-radius: 8px; /* Add rounded corners */
box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add a subtle shadow */
}

.close-btn {
position: absolute;
top: 10px;
right: 15px;
font-size: 20px;
font-weight: bold;
color: #aaa;
cursor: pointer;
}

/* Style the address boxes */
.address-box {
border: 1px solid #ccc;
padding: 15px;
margin-bottom: 10px;
border-radius: 5px;
}

.address-box label {
display: block; /* Make labels clickable */
cursor: pointer;
}

.payment-box input[type="radio"] {
margin-right: 10px;
vertical-align: middle; /* Align radio button with text */
}


/* Style buttons */
button {
padding: 8px 15px;
border: none;
border-radius: 5px;
cursor: pointer;
}


/* Position action buttons in the address box */
.address-actions {
margin-top: 10px;
}

.address-actions button {
margin-right: 5px;
}
.popup {
    position: fixed;
    top: 20px;
    right: 20px;
    background-color: #ff4444;
    color: white;
    padding: 15px;
    border-radius: 5px;
    z-index: 1000;
    display: none;
}
</style>

<body>
<div class="container">
<!-- Left Column -->
<div class="left-column">
    <div class="header">
        <div class="header-left">
            <a class="navbar-brand" href="#">FORU</a>
        </div>
        <div class="header-right">
            <a href="/cart" style="color: rgb(216, 214, 214);">Bag</a>
            <a href="/address-cart" style="color: rgb(216, 214, 214);">Address</a>
            <a href="/payment">3.Payment</a>
        </div>
    </div>

 <div class="address">
            <div class="address-header">
                <h6>Address:</h6>
            </div>
            {{#if addressObj}}
            <div class="address-header" style="background-color: white;border-radius:2px;padding-left:10px">
                    <span> Deliver to: {{addressObj.name}}, {{addressObj.postalCode}}<br> {{addressObj.house}}, {{addressObj.city}}, {{addressObj.state}}</span>
                </div>
                 {{/if}}
        </div>
        <div class="payment-box">
    <p style="font-size: 18px; color:#605d5d">Payment method</p>
    <label>
        <input type="radio" name="paymentMethod" value="Cash on Delivery"> <span>Cash on Delivery   </span>
    </label>
    <label style="margin-left: 50px;">
        <input type="radio" name="paymentMethod" value="Online Payment"> <span>  Online Payment</span>
    </label>
</div>
</div>

<!-- Right Column -->
<div class="right-column">
    <div class="price-details">
        <div class="price-summary">
            <span>Total MRP</span>
            <span>₹{{cart.totalPrice}}</span>
        </div>
         {{#if cart.discountAmount}}
                <div class="price-summary">
                    <span>Coupon discount</span>
                    <span>-₹{{cart.discountAmount}}</span>
                </div>
                
                {{else}}
                <div class="price-summary">
                    <span>Coupon discount</span>
                    <span>0</span>
                </div>
                {{/if}}
        {{#if cart.shippingFee}}
                <div class="price-summary">
                    <span>Shipping Fee</span>
                    <span>{{cart.shippingFee}}</span>
                </div>
                {{else}}
                <div class="price-summary">
                    <span>Shipping Fee</span>
                    <span>FREE</span>
                </div>
                {{/if}}
        <div class="price-summary total-amount">
            <span>Total Amount</span>
            <span>₹{{cart.newTotalAmount}}</span>
        </div>
    </div>

    <button class="place-order">PLACE ORDER</button>
</div>
<div id="popup-message" class="popup">
<span id="popup-text"></span>
</div> 
</div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
document.querySelector('.place-order').addEventListener('click', async function () {
    const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
    const addressId = '{{addressObj._id}}'; 

    if (!selectedPaymentMethod) {
        showPopup('Please choose a payment method.');
        return;
    }

    if (!addressId) {
        showPopup('Please select a delivery address.');
        return;
    }

    const paymentMethod = selectedPaymentMethod.value;

    try {
        const response = await fetch('/place-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                paymentMethod: paymentMethod,
                addressId: addressId,
            }),
        });

        const data = await response.json();

        if (response.ok) {
            if(paymentMethod === 'Online Payment'){
                const options = {
                    key: 'rzp_test_buXTHPZB2Eujic', 
                    amount: data.amount,
                    currency: 'INR',
                    name: 'FORU',
                    description: 'Payment for your order',
                    order_id: data.razorpayOrderId,
                    handler: async function(response){
                        console.log('Razorpay Response:', response);
                        const paymentResponse = await fetch('/handle-payment-response',{
                            method :'POST',
                            headers:{
                                'Content-Type': 'application/json',
                            },
                            body:JSON.stringify({
                                orderId: response.razorpay_order_id,
                                paymentId: response.razorpay_payment_id,
                                signature: response.razorpay_signature,
                                status: 'success',
                                order:data.orderId
                            })
                        })
                        if(paymentResponse.ok){
                            window.location.href = `/order-confirmation/${data.orderId}`;
                        }else{
                            showPopup('Payment verification failed.');
                        }
                    },
                    prefill:{
                        name: '{{user.name}}',
                        email: '{{user.email}}', 
                        contact: '{{user.phone}}'
                    },
                    theme:{
                        color: '#d6a57a'
                    }
                }
                const rzp = new Razorpay(options);
                rzp.on('payment failed',async function(response){
                    console.log("haai")
                    const paymentResponse = await fetch('/handle-payment-response',{
                        method : 'POST',
                        headers :{
                            'Content-Type': 'application/json',
                        },
                        body : JSON.stringify({
                            orderId: order.id,
                            status: 'failed',
                        })
                    })
                    if(paymentMethod.ok){
                        showPopup("Payment failed. Please try again.")
                    }else{
                        showPopup('Failed to process payment.')
                    }
                })
                rzp.open()
            }else{
                window.location.href = `/order-confirmation/${data.orderId}`;
            }
        } else {
            showPopup(data.message || 'Failed to place order.');
        }
    } catch (error) {
        console.error('Error:', error);
        showPopup('An error occurred while placing the order.');
    }
});

// Function to show pop-up messages
function showPopup(message) {
    const popup = document.getElementById('popup-message');
    const popupText = document.getElementById('popup-text');
    popupText.textContent = message;
    popup.style.display = 'block';

    // Hide the popup after 3 seconds
    setTimeout(() => {
        popup.style.display = 'none';
    }, 3000);
}
</script>