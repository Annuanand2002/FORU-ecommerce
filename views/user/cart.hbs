
    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 0;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(to right, #f5f5f5, #d6a57a);
        }

        .container {
            max-width: 1200px;
            margin: 50px auto;
            padding: 20px;
            display: flex;
            gap: 20px;
            background-color: white;
        }

        .left-column {
            flex: 2; /* Takes 2/3 of the space */
            border: 1px solid #ddd; /* Add border to left column */
            border-radius: 10px; /* Rounded corners */
            padding: 20px; /* Add padding for spacing */
        }

        .right-column {
            flex: 1; /* Takes 1/3 of the space */
            border: 1px solid #ddd; /* Add border to right column */
            border-radius: 10px; /* Rounded corners */
            padding: 20px; /* Add padding for spacing */
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .header-left img {
            width: 50px;
            margin-right: 10px;
        }

        .header-right {
            display: flex;
            justify-content: center;
            align-items: center;
            flex: 1;
        }

        .header-right a {
            margin: 0 15px;
            color: black;
            text-decoration: none;
            font-weight: bold;
        }

        .address {
            margin-bottom: 20px;
            background-color: rgb(232, 218, 200);
            padding: 20px;
            border-radius: 10px;
        }

        .address-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .address-content {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
        }

        .item {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }

        .item img {
            width: 100px;
            margin-right: 10px;
        }

        .item-details {
            flex: 1;
        }

        .item-name {
            font-weight: bold;
        }

        .item-options {
            display: flex;
            align-items: center;
            margin-top: 10px;
        }

        .item-options select {
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 3px;
            margin-right: 10px;
        }

        .item-options button {
            padding: 5px 10px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        .price-details {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .price-summary {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .total-amount {
            font-weight: bold;
            font-size: 1.2rem;
        }

        .place-order {
            background-color: rgb(228, 178, 117);
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
        }

        /* Responsive Styles */
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }

            .left-column,
            .right-column {
                flex: 1;
            }

            .item {
                flex-direction: column;
                align-items: flex-start;
            }

            .item img {
                width: 80px;
                margin-right: 0;
                margin-bottom: 10px;
            }

            .item-options {
                flex-direction: column;
                align-items: flex-start;
            }

            .item-options select {
                margin-right: 0;
                margin-bottom: 10px;
            }
        }
        .modal {
    display: none; /* Hidden by default */
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 30%; /* Adjust as needed */
    position: relative; /* For positioning close button */
    border-radius: 8px; /* Add rounded corners */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add a subtle shadow */
}

.close-btn {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 20px;
    font-weight: bold;
    color: #aaa;
    cursor: pointer;
}

/* Style the address boxes */
.address-box {
    border: 1px solid #ccc;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 5px;
}

.address-box label {
    display: block; /* Make labels clickable */
    cursor: pointer;
}

.address-box input[type="radio"] {
    margin-right: 10px;
    vertical-align: middle; /* Align radio button with text */
}

.home-label {
    background-color: #eee;
    color: #666;
    padding: 3px 8px;
    border-radius: 3px;
    font-size: 12px;
    margin-left: 10px;
}

/* Style buttons */
button {
    padding: 8px 15px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.deliver-btn {
    background-color: #007bff; /* Blue */
    color: white;
}

.edit-btn {
    background-color: #ffc107; /* Yellow */
}

.delete-btn {
    background-color: #dc3545; /* Red */
    color: white;
}

/* Position action buttons in the address box */
.address-actions {
    margin-top: 10px;
}

.address-actions button {
    margin-right: 5px;
}
.quantity-controls {
    display: flex;
    align-items: center;
    gap: 10px;
}

.quantity-controls button {
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #f8f9fa;
    cursor: pointer;
}

.quantity-controls button:hover {
    background-color: #e9ecef;
}

.quantity {
    font-size: 16px;
    font-weight: bold;
}


#coupon-applied-section {
    background-color: #f8f9fa;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
}

#remove-coupon-btn:hover {
    color: #dc3545; /* Red color on hover */
}
    </style>

<body>
    <div class="container">
        <!-- Left Column -->
        <div class="left-column">
            <div class="header">
                <div class="header-left">
                    <a class="navbar-brand" href="#">FORU</a>
                </div>
                <div class="header-right">
                    <a href="/cart">1.Bag</a>
                    <a  style="color: rgb(216, 214, 214);">Address</a>
                    <a  style="color: rgb(216, 214, 214);">Payment</a>
                </div>
            </div>

            <div class="address">
                {{#if user.addresses.length}}
                <div class="address-header">
                    <span>Deliver to: {{user.addresses.[0].name}}, {{user.addresses.[0].postalCode}}</span>
                    <a href="#">
                    </a>
                </div>
                <div class="address-content">
                    {{user.addresses.[0].house}}, {{user.addresses.[0].city}}, {{user.addresses.[0].state}}

                </div>
                {{else}}
        <p>No saved address found.</p>
    {{/if}} 
            </div>
            {{#if cart.items.length}}
            {{#each cart.items}}
            <div class="card mb-3">
                <div class="row g-0">
                    <div class="col-md-4">
                        <img src="{{this.productId.images.[0]}}" class="img-fluid rounded-start" alt="{{this.productId.images.[0]}}">
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title">{{this.productId.gender}}</h5>
                            <p class="card-text">{{this.productId.name}}</p>
                           <span class="quantity" style="font-family: 'Times New Roman', Times, serif; font-size:16px;">
  {{#if this.productId.offerAmount}}
    <!-- If offerAmount exists, show real price crossed out and offer price -->
    <span style="text-decoration: line-through; color: gray;">₹{{this.productId.price}}</span>
    <span style="color: red; margin-left: 5px;">₹{{this.productId.offerAmount}}</span>
  {{else}}
    <!-- If no offerAmount, show only real price -->
    ₹{{this.productId.price}}
  {{/if}}
</span>
                            <p class="card-text"><small class="text-muted">Size: {{this.size}}</small></p>
                            <div class="d-flex justify-content-between align-items-center">
                                 <div class="quantity-controls">
                        <button class="btn btn-sm btn-outline-secondary decrease-quantity" data-product-id="{{this.productId._id}}" data-size="{{this.size}}">-</button>
                        <span class="quantity">{{this.quantity}}</span>
                        <button class="btn btn-sm btn-outline-secondary increase-quantity" data-product-id="{{this.productId._id}}" data-size="{{this.size}}">+</button>
                        
                    </div>
                                <button class="btn btn-danger btn-sm remove-from-cart" data-product-id="{{this.productId._id}}" data-size="{{this.size}}">REMOVE</button>
                                <button class="btn btn-warning btn-sm move-to-wishlist" data-product-id="{{this.productId._id}}" data-size="{{this.size}}">MOVE TO WISHLIST</button>
                            </div>
                            
                            <div class="out-of-stock-message" style="color: red; font-size: 12px; display: none;">Out of Stock</div>
                        </div>
                    </div>
                </div>
            </div>
            {{/each}}
        {{else}}
            <p>Your cart is empty.</p>
        {{/if}}
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <p style="margin: 0;">Add more from wishlist</p>
                <a href="/wishlist">
                    <button style="background-color: rgb(228, 178, 117); color:white; border:none; width:100px; height:40px;border-radius:5px">Add</button>
                </a>
            </div>
        </div>

        <!-- Right Column -->
        <div class="right-column">
            <div class="price-details">
                <div class="price-summary">
                    <span>Total MRP</span>
                    <span>₹{{totalPrice}}</span>
                </div>

                {{#if shippingFee}}
                <div class="price-summary">
                    <span>Shipping Fee</span>
                    <span>{{shippingFee}}</span>
                </div>
                {{else}}
                <div class="price-summary">
                    <span>Shipping Fee</span>
                    <span>FREE</span>
                </div>
                {{/if}}
                <!-- In your right-column section where coupon discount is shown -->
{{#if discountAmount}}
<div class="price-summary">
        <span>Coupon discount</span>
        <span>
            -₹{{discountAmount}}
            <button id="remove-coupon-btn" 
                    style="background: none; 
                           border: none; 
                           cursor: pointer; 
                           color: #999;
                           transition: color 0.2s;
                           padding: 0;">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                </svg>
            </button>
        </span>
    {{#if appliedCoupon}}
    <small style="color: green; display: block; font-size: 12px; text-align: right;">
        {{appliedCoupon.couponName}}
    </small>
    {{/if}}
</div>
{{else}}
<div class="price-summary">
    <span>Apply coupon</span>
    <a href="/apply-coupon?totalPrice={{totalPrice}}">Apply coupon</a>
</div>
{{/if}}
             
                <div class="price-summary total-amount">
                    <span>Total Amount</span>
                    <span>₹{{newTotalPrice}}</span>
                </div>
            </div>
            

            <a href="/address-cart" style="text-decoration: none;"><button class="place-order" id="place-order-btn">PLACE ORDER</button></a>
  <!-- Right Column - Coupon Section -->
{{!-- <div class="coupon-section" style="margin-top: 20px; border-top: 1px solid #eee; padding-top: 15px;">
    <h5 style="margin-bottom: 15px; color: #333;">Available Coupons</h5>
    
    {{#if coupons.length}}
        <div class="coupon-list" style="max-height: 300px; overflow-y: auto;">
            {{#each coupons}}
            <div class="coupon-item" 
                 style="margin-bottom: 10px; 
                        padding: 12px; 
                        background: #f8f9fa; 
                        border-radius: 8px;
                        border: 1px solid #e0e0e0;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <div style="display: flex; align-items: center;">
                            <input 
                                class="form-check-input coupon-radio" 
                                type="radio" 
                                name="couponId" 
                                value="{{this._id}}" 
                                id="coupon-{{this._id}}"
                                style="margin-right: 10px;"
                                {{#if (eq this._id ../appliedCoupon._id)}}checked{{/if}}
                            >
                            <div>
                                <strong style="color: #d6a57a;">{{this.couponName}}</strong>
                                <div style="font-size: 12px; color: #666; margin-top: 3px;">
                                    <span>₹{{this.discountAmount}} off</span> | 
                                    <span>Min. ₹{{this.minPurchaseAmount}}</span> | 
                                    <span>Exp: {{formatDate this.expiryDate 'DD MMM'}}</span>
                                </div>
                            </div>
                        </div>
                        <div style="font-size: 12px; color: #555; margin-top: 5px;">
                            {{this.description}}
                        </div>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
        
    <div class="mt-3" style="display: flex; flex-direction: column; gap: 10px;">
    <!-- Error message container (initially hidden) -->
    <div id="coupon-error" class="text-danger" style="display: none; margin-bottom: 5px;">
        Please select a coupon to apply
    </div>
    
    <div style="display: flex; gap: 10px;">
        <button 
            type="button" 
            id="apply-coupon-btn" 
            class="btn" 
            style="background-color: #d6a57a; color: white; flex: 1;"
            {{#if cart.discountAmount}}disabled{{/if}}
        >
            {{#if cart.discountAmount}}Applied{{else}}Apply Coupon{{/if}}
        </button>
        <a 
            href="/cart/remove-coupon" 
            class="btn btn-outline-secondary" 
            style="flex: 1;"
            {{#unless cart.discountAmount}}disabled{{/unless}}
        >
            Remove
        </a>
    </div>
</div>
    {{else}}
        <div class="text-center py-3" style="color: #666;">
            No coupons available for this order
        </div>
    {{/if}}
</div> --}}
        </div>
        <div id="popup-message" class="popup">
  <span id="popup-text"></span>
</div> 
    </div>

    <script>
       document.addEventListener("DOMContentLoaded", function () {

        const removeCouponBtn = document.getElementById('remove-coupon-btn');
    if (removeCouponBtn) {
        removeCouponBtn.addEventListener('click', async function(e) {
            e.preventDefault();
            
            try {
                const response = await fetch('/remove-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest' // Helps identify AJAX requests
                    },
                    credentials: 'same-origin' // Ensures cookies are sent
                });

                const result = await response.json();
                
                if (response.ok) {
                    showPopup('Coupon removed successfully', 'success');
                    // Update UI without full page reload (optional)
                    setTimeout(() => {
                        window.location.reload(); // Reload to reflect changes
                    }, 1000);
                } else {
                    showPopup(result.message || 'Failed to remove coupon', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showPopup('An error occurred while removing coupon', 'error');
            }
        });
        
        // Add hover effect
        removeCouponBtn.addEventListener('mouseover', function() {
            this.style.color = '#dc3545'; // Red color on hover
        });
        
        removeCouponBtn.addEventListener('mouseout', function() {
            this.style.color = '#999'; // Gray color normally
        });
    }
    // Function to show the popup message
    function showPopup(message, type = 'success') {
        const popup = document.getElementById('popup-message');
        const popupText = document.getElementById('popup-text');
        popupText.textContent = message;
        popup.style.backgroundColor = type === 'success' ? '#4caf50' : '#f44336';
        popup.style.display = 'block';
        popup.style.animation = 'slideIn 0.5s ease-out';

        setTimeout(() => {
            popup.style.animation = 'slideOut 0.5s ease-out';
            setTimeout(() => {
                popup.style.display = 'none';
            }, 500);
        }, 3000);
    }

    async function fetchAvailableQuantity(productId, size) {
        try {
            const response = await fetch(`/product/${productId}/size/${size}/quantity`);
            const result = await response.json();

            if (response.ok) {
                return result.quantity; 
            } else {
                console.error('Failed to fetch available quantity:', result.message);
                return 0; 
            }
        } catch (error) {
            console.error('Error:', error);
            return 0; 
        }
    }

    // Function to update the quantity in the cart
    async function updateQuantity(productId, size, newQuantity) {
        try {
            const response = await fetch('/cart/update-quantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId, size, quantity: newQuantity }),
            });

            const result = await response.json();

            if (response.ok) {
                window.location.reload(); 
            } else {
                showPopup(result.message || 'An error occurred', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            showPopup('An error occurred while updating quantity', 'error');
        }
    }

    // Handle increase quantity button click
    document.querySelectorAll('.increase-quantity').forEach(button => {
        button.addEventListener('click', async function () {
            const productId = this.getAttribute('data-product-id');
            const size = this.getAttribute('data-size');
            const quantityElement = this.parentElement.querySelector('.quantity');
            const outOfStockMessage = this.closest('.card').querySelector('.out-of-stock-message');

            // Fetch the available quantity for the selected size
            const availableQuantity = await fetchAvailableQuantity(productId, size);
            let quantity = parseInt(quantityElement.textContent);

            // Check if the quantity can be increased
            if (quantity < availableQuantity) {
                quantity += 1;
                quantityElement.textContent = quantity;

                // Update the quantity in the cart
                await updateQuantity(productId, size, quantity);

                // Hide the "Out of Stock" message if it was previously shown
                outOfStockMessage.style.display = 'none';
            } else {
                showPopup('Cannot increase quantity. Maximum stock reached.', 'error');
            }
        });
    });

    // Handle decrease quantity button click
    document.querySelectorAll('.decrease-quantity').forEach(button => {
        button.addEventListener('click', async function () {
            const productId = this.getAttribute('data-product-id');
            const size = this.getAttribute('data-size');
            const quantityElement = this.parentElement.querySelector('.quantity');
            const outOfStockMessage = this.closest('.card').querySelector('.out-of-stock-message');

            let quantity = parseInt(quantityElement.textContent);

            if (quantity > 1) {
                quantity -= 1;
                quantityElement.textContent = quantity;

                // Update the quantity in the cart
                await updateQuantity(productId, size, quantity);

                // Hide the "Out of Stock" message if it was previously shown
                outOfStockMessage.style.display = 'none';
            } else {
                // Show the "Out of Stock" message if the quantity becomes zero
                outOfStockMessage.style.display = 'block';
            }
        });
    });

    // Handle remove from cart button click
    document.querySelectorAll('.remove-from-cart').forEach(button => {
        button.addEventListener('click', async function () {
            const productId = this.getAttribute('data-product-id');
            const size = this.getAttribute('data-size');

            try {
                const response = await fetch('/cart/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId, size }),
                });

                const result = await response.json();

                if (response.ok) {
                    showPopup('Product removed from cart', 'success');
                    this.closest('.card').remove();
                    setTimeout(() => {
                        window.location.reload();
                    }, 3000);
                } else {
                    showPopup(result.message || 'An error occurred', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showPopup('An error occurred while removing from cart', 'error');
            }
        });
    });

    // Handle move to wishlist button click
    document.querySelectorAll('.move-to-wishlist').forEach(button => {
        button.addEventListener('click', async function () {
            const productId = this.getAttribute('data-product-id');
            const size = this.getAttribute('data-size');

            try {
                // Add the product to the wishlist
                const wishlistResponse = await fetch('/wishlist/toggle', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId }),
                });

                const wishlistResult = await wishlistResponse.json();

                if (wishlistResponse.ok && wishlistResult.action === 'added') {
                    // Remove the product from the cart
                    const cartResponse = await fetch('/cart/remove', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ productId, size }),
                    });

                    const cartResult = await cartResponse.json();

                    if (cartResponse.ok) {
                        showPopup('Product moved to wishlist', 'success');
                        // Remove the product card from the DOM
                        this.closest('.card').remove();
                    } else {
                        showPopup(cartResult.message || 'An error occurred', 'error');
                    }
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showPopup(wishlistResult.message || 'An error occurred', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showPopup('An error occurred while moving to wishlist', 'error');
            }
        });
    });
    const placeOrderButton = document.getElementById('place-order-btn');
    if (placeOrderButton) {
        placeOrderButton.addEventListener('click', function (event) {
            const totalPrice = parseFloat("{{totalPrice}}"); 

            if (totalPrice <= 0) {
                event.preventDefault(); 
                showPopup('Your cart is empty. Add items to proceed.', 'error');
            }
        });
    }
});
document.addEventListener("DOMContentLoaded", function() {
    const applyBtn = document.getElementById('apply-coupon-btn');
    const errorMsg = document.getElementById('coupon-error');
    
    if (applyBtn && !applyBtn.disabled) {
        applyBtn.addEventListener('click', async function() {
            const selectedCoupon = document.querySelector('input[name="couponId"]:checked');
            
            if (!selectedCoupon) {
                // Show error message instead of alert
                errorMsg.style.display = 'block';
                
                // Hide error after 3 seconds
                setTimeout(() => {
                    errorMsg.style.display = 'none';
                }, 3000);
                return;
            }

            try {
                errorMsg.style.display = 'none'; // Hide error if showing
                const response = await fetch('/apply-coupon', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ couponId: selectedCoupon.value })
                });
                
                if (response.ok) {
                    window.location.reload();
                } else {
                    const result = await response.json();
                    errorMsg.textContent = result.message || 'Failed to apply coupon';
                    errorMsg.style.display = 'block';
                }
            } catch (error) {
                console.error('Error:', error);
                errorMsg.textContent = 'An error occurred while applying coupon';
                errorMsg.style.display = 'block';
            }
        });
    }

    // Remove button handler remains the same
    const removeBtn = document.querySelector('a[href="/cart/remove-coupon"]');
    if (removeBtn && !removeBtn.disabled) {
        removeBtn.addEventListener('click', async function(e) {
            e.preventDefault();
            try {
                const response = await fetch('/cart/remove-coupon', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (response.ok) {
                    window.location.reload();
                } else {
                    const result = await response.json();
                    alert(result.message || 'Failed to remove coupon');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while removing coupon');
            }
        });
    }
});


    </script>
</body>