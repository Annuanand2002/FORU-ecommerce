
    <style>
        body {
            font-family: sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center; /* Center horizontally */
            justify-content: center; /* Center vertically */
            min-height: 100vh; /* Ensure full viewport height */
            margin: 0;
            background-color: #f4f4f4; /* Light gray background */
        }

        .container {
            background: linear-gradient(to right, #f5f5f5, #d6a57a); /* Gradient background */
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
            width: fit-content; /* Adjust width as needed */
        }

        .checkmark-circle {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background-color: #e2d5c3; /* Light beige/gold circle background */
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .checkmark {
            width: 60px;
            height: 60px;
            
        }

        h2 {
            color: #333;
            margin-bottom: 10px;
        }

        p {
            color: #666;
            margin-bottom: 10px; /* Reduced margin for better spacing */
        }

        .continue-shopping {
            display: inline-block;
            padding: 12px 24px;
            background-color: #c20000; /* Red button */
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .continue-shopping:hover {
            background-color: #a00000; /* Darker red on hover */
        }
        .invoice-download {
        display: inline-block;
        padding: 12px 24px;
        background-color: #4CAF50; /* Green button */
        color: white;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.3s;
        margin-top: 15px;
    }
    .invoice-download:hover {
        background-color: #45a049; /* Darker green on hover */
    }
    .button-group {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-top: 20px;
    }
    </style>
<body>
    <div class="container">
        <div class="checkmark-circle">
            <div class="checkmark">❌</div>
        </div>
        <h2>Order Failed!</h2>
        <p>Please retry the payment here</p>
        <p>Order-id: {{order._id}}</p>
        <p>Payment Method: {{paymentMethod}}</p>
        <p>Total Amount: ₹{{add order.newTotal order.walletAmountUsed}}</p>
        <div class="button-group">
            <button id="retry-payment" class="btn-retry" style="background-color: green; color:white;border:none" >
        Retry Payment
      </button>
            <a href="/orders" class="continue-shopping">Go to order page</a>
        </div>
    </div>
</body>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
document.getElementById('retry-payment').addEventListener('click', async () => {
  try {
    // Step 1: Create Razorpay order via your backend
    const response = await fetch(`/retry-payment`, {
      method: 'POST', 
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ orderId: '{{order._id}}' })
    });
    
    const data = await response.json();
    
    if (data.success) {
      // Step 2: Open Razorpay checkout
      const options = {
        key: 'rzp_test_buXTHPZB2Eujic',
        amount: data.amount,
        currency: 'INR',
        name: 'FORU',
        order_id: data.razorpayOrderId,
        handler: async function(response) {
          // Step 3: Verify payment with backend
          const verification = await fetch('/handle-payment-response', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              orderId: response.razorpay_order_id,
                paymentId: response.razorpay_payment_id,
                signature: response.razorpay_signature,
                status: 'success',
                order: data.orderId,
            })
          });

          //const result = await verification.json();
          console.log("result",verification)
          if (verification.ok) {
            // Step 4: Only redirect after successful verification
            window.location.href = `/order-confirmation/${data.orderId}`;
          } else {
            alert('Payment verification failed: ' + (result.message || 'Unknown error'));
          }
        },
        modal: {
          ondismiss: function() {
            window.location.reload();
          }
        },
        prefill: {
          name: '{{user.name}}',
          email: '{{user.email}}',
          contact: '{{user.phone}}'
        } ,
        theme: {
        color: '#d6a57a',
    },
      };
      
      const rzp = new Razorpay(options);
      rzp.open();
    } else {
      alert(data.message || 'Failed to initiate payment');
    }
  } catch (error) {
    console.error('Payment error:', error);
    alert('Failed to initiate payment: ' + error.message);
  }
});
</script>
