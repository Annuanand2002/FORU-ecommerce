<style>
  body {
    background: linear-gradient(to right, #f5f5f5, #d6a57a);
    color: #4e4e4e;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
}

.account-page {
    max-width: 960px;
    margin: 20px auto;
    padding: 20px;
    background-color: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    display: flex;
}

.sidebar {
    width: 250px;
    padding: 20px;
    border-right: 1px solid #eee;
}

.sidebar-header {
    font-weight: bold;
    margin-bottom: 20px;
}

.sidebar-menu {
    list-style: none;
    padding: 0;
    margin: 0;
}

.sidebar-menu-item {
    padding: 10px 0;
    cursor: pointer;
    transition: background-color 0.2s;
}

.sidebar-menu-item a {
    text-decoration: none;
    color: black;
}

.sidebar-menu-item:hover {
    background-color: #f0f0f0;
}

.sidebar-menu-item.active {
    font-weight: bold;
    color: #000;
}
/* Order Item */
.order-item {
    border: 1px solid #eee;
    padding: 15px;
    border-radius: 6px;
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.order-item-product {
    display: flex;
    align-items: center;
    gap: 10px;
}

.order-item-image img {
    max-height: 60px;
    width: auto;
}

.order-item-info {
    flex: 1;
    font-family: 'Times New Roman', Times, serif;
    font-size: 12px;
    color: #4e4e4e;
}

.product-name {
    font-family: 'Georgia', serif;
    font-size: 12px;
    font-weight: bold;
    color: #000;
}

.order-item-meta {
    display: flex;
    flex-direction: column;
    gap: 5px;
    text-align: right;
}

.order-item-status {
    font-weight: bold;
}

.order-item-date {
    color: #666;
}

/* Delivery Address Section */
.delivery-address {
    margin-top: 20px;
    padding: 15px;
    border: 1px solid #eee;
    border-radius: 6px;
    background-color: #f9f9f9;
}

.delivery-address h3 {
    font-size: 16px;
    font-weight: bold;
    margin-bottom: 10px;
}

.address-details p {
    margin: 5px 0;
    font-size: 14px;
    color: #4e4e4e;
}

/* Savings and Total Price Section */
.price-details {
    margin-top: 20px;
    padding: 15px;
    border: 1px solid #eee;
    border-radius: 6px;
    background-color: #f9f9f9;
}

.savings {
    font-size: 14px;
    color: #4e4e4e;
    margin-bottom: 10px;
}

.savings-amount {
    font-weight: bold;
    color: green;
}

.total-price {
    font-size: 14px;
    color: #4e4e4e;
    margin-bottom: 10px;
}

.price-amount {
    font-weight: bold;
}

.payment-method {
    font-size: 14px;
    color: #4e4e4e;
    margin-bottom: 10px;
}

.seller-info {
    font-size: 14px;
    color: #4e4e4e;
    margin-bottom: 10px;
}

.get-invoice-button {
  
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.arrow-icon a {
    text-decoration: none;
    color: inherit; 
    font-size: 18px; 
    display: block; 
    padding: 10px;
}
/* Other Items in This Order Section */
.other-items {
    margin-top: 20px;
    padding: 15px;
    border: 1px solid #eee;
    border-radius: 6px;
    background-color: #f9f9f9;
}

.other-items h3 {
    font-size: 16px;
    font-weight: bold;
    margin-bottom: 10px;
}

.order-id {
    font-size: 14px;
    color: #4e4e4e;
    margin-bottom: 10px;
}

.order-id-number {
    font-weight: bold;
}

.other-item {
    display: flex;
    align-items: center;
    margin-top: 10px;
}

.other-item-image img {
    max-height: 80px;
    width: auto;
    margin-right: 15px;
}

.other-product-name {
    font-size: 14px;
    color: #4e4e4e;
}
</style>
<div class="account-page">
    <div class="sidebar">
        <div class="sidebar-header">
            Account
        </div>
        <ul class="sidebar-menu">
            <li class="sidebar-menu-item">
                <a href="/account">Profile</a>
            </li>
            <li class="sidebar-menu-item active">
                <a href="/orders">Orders & Returns</a>
            </li>
            <li class="sidebar-menu-item">
                <a href="/address">Addresses</a>
            </li>
            <li class="sidebar-menu-item">
                <a href="/wallet">Wallet</a>
            </li>
            <li class="sidebar-menu-item">
                <a href="/delete-account">Delete Account</a>
            </li>
        </ul>
    </div>
    <div class="content">
        <div class="orders">
            <div class="orders-header">
                <span style="font-family: 'Times New Roman', Times, serif font-size:18px;"></span>
            </div>

            <!-- Order Item -->
            <div class="order-item">
                <div class="order-item-product">
                    <div class="order-item-image">
                        <img src="{{item.image}}" alt="{{item.productName}}">
                    </div>
                    <div class="order-item-info">
                        <span class="product-name" style="font-size: 16px; color:#d6a57a">{{item.productName}}</span>
                        <br>
                        <span style="color: #4e4e4e; font-size:14px">Size: {{item.size}}</span>
                        <br>
                        <span style="color: #4e4e4e; font-size:14px">Quantity: {{item.quantity}}</span>
                        <br>
                        <span style="color: #4e4e4e; font-size:14px">QuantityPrice: ₹{{item.price}}</span>
                    </div>
                </div>
                <div class="order-item-meta">
                   <div class="order-item-status">
  <span style="font-size: 16px; 
               color: {{#if (eq item.status 'Completed')}}green{{else if (eq item.status 'Cancelled')}}red{{else if (eq item.status 'Returned')}}red{{else}}#d6a57a{{/if}};">
    Status: {{item.status}}
  </span>
</div>
                    <div class="order-item-date" style="margin-left: 50px;">
                        <span style="color: #4e4e4e; font-size:14px">Ordered Date: {{formatDate order.createdAt}}</span>
                    </div>
                </div>
            </div>

            <!-- Delivery Address Section -->
            <div class="delivery-address">
                <h3>Delivery Address</h3>
                <div class="address-details">
                    <p style="font-size: 12px; color:#4e4e4e">{{order.deliveryAddress.name}}</p>
                    
                    <p style="font-size: 12px; color:#4e4e4e">{{order.deliveryAddress.house}}, {{order.deliveryAddress.city}}, {{order.deliveryAddress.state}} -{{order.deliveryAddress.postalCode}}</p>
                </div>
            </div>

            <!-- Savings and Total Price Section -->
<div class="price-details">
    <div class="total-price">
        <h6>Total Amount:</h6>
        <span class="price-amount" style="color: #4e4e4e; font-size:14px">₹{{add order.newTotal order.walletAmountUsed}}</span>
    </div>

    {{#if (or (eq order.payment "Online Payment") (eq order.payment "Wallet"))}}
        <div>
            <p style="font-size: 12px; color:#a7a3a3">Wallet amount used: ₹{{order.walletAmountUsed}}</p>
        </div>
        <div>
            <p style="font-size: 14px; color:#a7a3a3">Amount paid: ₹{{order.newTotal}}</p>
        </div>
    {{else}}
        <div>
            <p style="font-size: 14px; color:#a7a3a3">Amount to be paid: ₹{{order.newTotal}}</p>
        </div>
    {{/if}}

    <div class="payment-method">
        <span style="color: #5aca2e; font-size:14px">Payment method: {{order.payment}}.</span>
    </div>

    <button 
        id="return-order-button" 
        class="get-invoice-button" 
        style="background-color: #d6a57a; color: white;"
        data-order-status="{{item.status}}"
        data-completion-date="{{item.completionDate}}">
        Return Order
    </button>

    <button 
        id="cancel-order-button" 
        class="get-invoice-button" 
        style="background-color: #d6a57a; color: white;"
        data-order-status="{{item.status}}">
        Cancel Order
    </button>
</div>
<!-- Modal for Cancellation Reason -->
<div id="cancel-order-modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); z-index: 1000;">
  <h3>Cancel Order</h3>
  <textarea id="cancellation-reason" placeholder="Enter reason for cancellation..." style="width: 100%; height: 100px; margin-bottom: 10px;"></textarea>
  <button id="submit-cancellation" style="background-color: #d6a57a; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;">Submit</button>
  <button id="close-modal" style="background-color: #ccc; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin-left: 10px;">Close</button>
</div>
<div id="overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 999;"></div>

<!-- Modal for Return Reason -->
<div id="return-order-modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); z-index: 1000;">
  <h3>Return Order</h3>
  <textarea id="return-reason" placeholder="Enter reason for return..." style="width: 100%; height: 100px; margin-bottom: 10px;"></textarea>
  <div id="return-reason-error" style="color: red; font-size: 14px; margin-bottom: 10px; display: none;">Please provide a reason for return.</div>
  <button id="submit-return" style="background-color: #d6a57a; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;">Submit</button>
  <button id="close-return-modal" style="background-color: #ccc; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin-left: 10px;">Close</button>
</div>
<div id="overlay-return" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 999;"></div>
            <div class="other-items">
                <h3>Other items in this order</h3>
                <div class="order-id">
                    Order ID: <span class="order-id-number" style="font-size: 14px; color:#4e4e4e">{{order._id}}</span>
                </div>
                {{#each order.items}}
    {{#if (neq this._id ../item._id)}} 
        <div class="other-item"> 
            <div class="other-item-image">
                <img src="{{this.productId.images.[0]}}" alt="{{this.productId.name}}">
            </div>
            <div class="other-item-info">
                <div class="other-product-name"><span style="color: #4e4e4e; font-size:12px">{{this.productId.name}}</span></div>
                <div class="other-product-details">
                    <span style="color: #4e4e4e; font-size:12px">Size: {{this.size}} | Quantity: {{this.quantity}} | Price: ₹{{this.price}}</span>
                </div>
                <div class="arrow-icon" style="margin-left: 300px;">
        <a href="/order-details/{{../order._id}}/{{this._id}}" style="color:#d6a57a;">&gt;</a>
    </div>
            </div>
        </div>
    {{/if}}
{{/each}}
            </div>
        </div>
    </div>
</div>

<div id="success-popup" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); z-index: 1000; text-align: center;">
  <p style="font-size: 16px; color: green;">Order item returned successfully!</p>
  <button id="close-popup" style="background-color: #d6a57a; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;">Close</button>
</div>
<div id="overlay-popup" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 999;"></div>

<script>
document.addEventListener("DOMContentLoaded", function () {
  // Cancel Order Functionality
  const cancelButton = document.getElementById("cancel-order-button");
  const cancelModal = document.getElementById("cancel-order-modal");
  const overlay = document.getElementById("overlay");
  const cancellationReason = document.getElementById("cancellation-reason");
  const submitCancellation = document.getElementById("submit-cancellation");
  const closeModal = document.getElementById("close-modal");

  // Initialize cancel button based on order status
  if (cancelButton) {
    const orderStatus = cancelButton.dataset.orderStatus;
    
    if (orderStatus !== "Pending") {
      cancelButton.disabled = true;
      cancelButton.style.backgroundColor = "#ccc";
      cancelButton.style.cursor = "not-allowed";
    } else {
      cancelButton.addEventListener("click", function () {
        cancelModal.style.display = "block";
        overlay.style.display = "block";
      });
    }
  }

  // Close cancel modal
  if (closeModal) {
    closeModal.addEventListener("click", function () {
      cancelModal.style.display = "none";
      overlay.style.display = "none";
    });
  }

  // Submit cancellation
  if (submitCancellation) {
    submitCancellation.addEventListener("click", async function () {
      const reason = cancellationReason.value.trim();

      if (!reason) {
        alert("Please provide a reason for cancellation.");
        return;
      }

      const data = {
        orderId: "{{order._id}}",
        itemId: "{{item._id}}",
        reason: reason,
      };

      try {
        const response = await fetch("/cancel-order", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        const result = await response.json();

        if (result.success) {
          window.location.reload();
        } else {
          alert(result.message || "Failed to cancel order. Please try again.");
        }
      } catch (error) {
        console.error("Error:", error);
        alert("An error occurred. Please try again.");
      } finally {
        cancelModal.style.display = "none";
        overlay.style.display = "none";
      }
    });
  }

  // Return Order Functionality
  const returnButton = document.getElementById("return-order-button");
  const returnModal = document.getElementById("return-order-modal");
  const overlayReturn = document.getElementById("overlay-return");
  const returnReason = document.getElementById("return-reason");
  const submitReturn = document.getElementById("submit-return");
  const closeReturnModal = document.getElementById("close-return-modal");
  const returnReasonError = document.getElementById("return-reason-error");
  const successPopup = document.getElementById("success-popup");
  const overlayPopup = document.getElementById("overlay-popup");
  const closePopup = document.getElementById("close-popup");

  // Initialize return button based on order status and completion date
  if (returnButton) {
    const orderStatus = returnButton.dataset.orderStatus;
    const completionDate = new Date(returnButton.dataset.completionDate);

    if (orderStatus === "Completed") {
      const currentDate = new Date();
      const returnEndDate = new Date(completionDate);
      returnEndDate.setDate(returnEndDate.getDate() + 7);

      if (currentDate <= returnEndDate) {
        returnButton.addEventListener("click", function () {
          returnModal.style.display = "block";
          overlayReturn.style.display = "block";
        });
      } else {
        returnButton.disabled = true;
        returnButton.style.backgroundColor = "#ccc";
        returnButton.style.cursor = "not-allowed";
      }
    } else {
      returnButton.disabled = true;
      returnButton.style.backgroundColor = "#ccc";
      returnButton.style.cursor = "not-allowed";
    }
  }

  // Close return modal
  if (closeReturnModal) {
    closeReturnModal.addEventListener("click", function () {
      returnModal.style.display = "none";
      overlayReturn.style.display = "none";
    });
  }

  // Submit return
  if (submitReturn) {
    submitReturn.addEventListener("click", async function () {
      const reason = returnReason.value.trim();
      returnReasonError.style.display = "none";

      if (!reason) {
        returnReasonError.style.display = "block";
        return;
      }

      const data = {
        orderId: "{{order._id}}",
        itemId: "{{item._id}}",
        reason: reason,
      };

      try {
        const response = await fetch("/return-order", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        const result = await response.json();

        if (result.success) {
          returnModal.style.display = "none";
          overlayReturn.style.display = "none";
          
          // Show success popup
          successPopup.style.display = "block";
          overlayPopup.style.display = "block";
          
          // Auto close after 3 seconds
          setTimeout(() => {
            successPopup.style.display = "none";
            overlayPopup.style.display = "none";
            window.location.reload();
          }, 3000);
        } else {
          alert(result.message || "Failed to return order. Please try again.");
        }
      } catch (error) {
        console.error("Error:", error);
        alert("An error occurred. Please try again.");
      }
    });
  }

  // Close success popup
  if (closePopup) {
    closePopup.addEventListener("click", function () {
      successPopup.style.display = "none";
      overlayPopup.style.display = "none";
      window.location.reload();
    });
  }
});
</script>